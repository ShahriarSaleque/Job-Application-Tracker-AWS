AWSTemplateFormatVersion: 2010-09-09
Description: jat-app

Transform:
  - AWS::Serverless-2016-10-31

Resources:

  JobApplicationTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: JobApplications
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod

  CreateApplicationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/createApplication.createApplicationHandler
      Runtime: nodejs18.x
      Environment:
        Variables:
          TABLE_NAME: JobApplications
          QUEUE_URL: !Ref ResumeProcessingQueue
      Events:
        CreateApplicationApi:
          Type: Api
          Properties:
            Path: /applications
            Method: POST
            RestApiId: !Ref MyApi

            
      Policies:
        - DynamoDBCrudPolicy:
            TableName: JobApplications
        - SQSSendMessagePolicy:
            QueueName: ResumeProcessingQueue
        - Statement:
            - Effect: Allow
              Action: "events:PutEvents"
              Resource: "*"

  GetApplicationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/getApplication.getApplicationHandler
      Runtime: nodejs18.x
      Environment:
        Variables:
          TABLE_NAME: JobApplications
      Events:
        GetApplicationApi:
          Type: Api
          Properties:
            Path: /applications
            Method: GET
            RestApiId: !Ref MyApi

      Policies:
        - DynamoDBReadPolicy:
            TableName: JobApplications

  GetApplicationByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/getApplicationById.getApplicationByIdHandler
      Runtime: nodejs18.x
      Environment:
        Variables:
          TABLE_NAME: JobApplications
      Events:
        GetApplicationByIdApi:
          Type: Api
          Properties:
            Path: /applications/{id}
            Method: GET
            RestApiId: !Ref MyApi

      Policies:
        - DynamoDBReadPolicy:
            TableName: JobApplications

  UpdateApplicationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/updateApplication.updateApplicationHandler
      Runtime: nodejs18.x
      Environment:
        Variables:
          TABLE_NAME: JobApplications
      Events:
        UpdateApplicationApi:
          Type: Api
          Properties:
            Path: /applications/{id}
            Method: PUT
            RestApiId: !Ref MyApi

      Policies:
        - DynamoDBCrudPolicy:
            TableName: JobApplications

  DeleteApplicationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/deleteApplication.deleteApplicationHandler
      Runtime: nodejs18.x
      Environment:
        Variables:
          TABLE_NAME: JobApplications
      Events:
        DeleteApplicationApi:
          Type: Api
          Properties:
            Path: /applications/{id}
            Method: DELETE  
            RestApiId: !Ref MyApi

      Policies:
        - DynamoDBCrudPolicy:
            TableName: JobApplications

  ResumeProcessingQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ResumeProcessingQueue
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ResumeDLQ.Arn
        maxReceiveCount: 5  # Number of times a message can be received before moving to DLQ
  
  ResumeDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ResumeDLQ

  ResumeProcessingWorker:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/processApplications.processApplicationsHandler
      Runtime: nodejs18.x
      Environment:
        Variables:
          QUEUE_URL: !Ref ResumeProcessingQueue
          TABLE_NAME: JobApplications
      Policies:
        - SQSSendMessagePolicy:
            QueueName: ResumeProcessingQueue
        - DynamoDBCrudPolicy:
            TableName: JobApplications
      Events:
        SQSQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt ResumeProcessingQueue.Arn

  # Define an Event Bridge rule
  JobApplicationEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: JobApplicationCreatedRule
      EventPattern:
        source:
          - "jat-app"
        detail-type:
          - "JobApplicationCreated"
      Targets:
        - Arn: !GetAtt ResumeProcessingQueue.Arn
          Id: "SendToSQS"
        - Arn: !Ref JobApplicationTopic
          Id: "SendToSNS"

  # Define an SNS topic
  JobApplicationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: JobApplicationTopic

  # Allow EventBridge to Publish to SQS
  EventBridgeToSQSAccess:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref ResumeProcessingQueue
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: "sqs:SendMessage"
            Resource: !GetAtt ResumeProcessingQueue.Arn
  
  # Allow EventBridge to Publish to SNS
  EventBridgeToSNSAccess:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref JobApplicationTopic
      PolicyDocument:
        Version: "2012-10-17" 
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: "sns:Publish"
            Resource: !Ref JobApplicationTopic  

  # Create an S3 bucket for resume uploads
  ResumeUploadBucket:
    Type: AWS::S3::Bucket
    Properties: {}

  # Add the lambda function to process resume files 
  ResumeFileProcessorFromS3:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/resumeHandler.resumeFileHandler
      Runtime: nodejs18.x
      Environment:
        Variables:
          TABLE_NAME: JobApplications
      Policies: 
        - Statement:
          - Effect: Allow
            Action:
              - lambda:AddPermission
              - s3:PutBucketNotification
            Resource: "*"
        - DynamoDBCrudPolicy:
            TableName: JobApplications

  AddBucketNotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs18.x
      Handler: src/handlers/addNotification.handler
      Timeout: 15
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - s3:PutBucketNotification
                - lambda:AddPermission
              Resource: "*"
      Environment:
        Variables:
          BUCKET_NAME: !Ref ResumeUploadBucket
          FUNCTION_ARN: !GetAtt ResumeFileProcessorFromS3.Arn
  
  AddBucketNotificationCustom:
    Type: Custom::AddNotification
    Properties:
      ServiceToken: !GetAtt AddBucketNotificationFunction.Arn
 
Outputs:
  ApiUrl:
    Description: "API Gateway endpoint URL"
    Value: 
      Fn::Sub: "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/applications"
